import time
import telebot
import os
from telebot import types
from dotenv import load_dotenv

import json

users = {}
users_file = "users.json"

try:
    with open(users_file, "r", encoding="utf-8") as f:
        users = json.load(f)
except FileNotFoundError:
    users = {}

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(TOKEN)

logging.basicConfig(filename='bot_errors.log', level=logging.ERROR)

file_paths = {
    "product": "https://clck.ru/3NB2zY",
    "sales": "https://clck.ru/3NB2wX",
    "sticks": "https://clck.ru/3NB2ur",
    "accessories": "https://clck.ru/3NB3aW",
}

VIDEO_FILE_IDS = {
    "direct": "BAACAgIAAxkBAAIBZ2h457B6jJvSCJY7qYfqOZ_oSQjtAAIJeQACe2XJS73hNlvfZvP4NgQ",
    "reboot": "BAACAgIAAxkBAAICcGh56dNWrQEKhRKT1SWdBNPsqbCSAAIpdAACw5XRSzq54nCgfjqQNgQ",
    "intro": "BAACAgIAAxkBAAICqWh58qS32y4lcAABwTpXlzsrGMIELwACLXMAAntl0UsQKxQvBG_fLDYE",
    "replacement": "CgACAgIAAxkBAAICzGh5-xBcF1InTNdiFGGthnxeLnQWAAL_cwACe2XRS2BVCLRNVS-fNgQ",
    "return": "CgACAgIAAxkBAAICzmh5-3hrMswogfi0ZT0d7nqH9liWAAIKdAACe2XRS-e0JbA3KIndNgQ",
    "unregisteredconsumer": "CgACAgIAAxkBAAIC0Gh5-7vPyvivL9O2qAyyEum-UWn5AAIPdAACe2XRS1AKLBQAAYZLOzYE",
}

texts = {
    "ru": {
        "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –ë–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Ploom - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—É—á–µ–Ω–∏—é. –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        "name_reply": "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "materials": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "videoguides": "–í–∏–¥–µ–æ—É—Ä–æ–∫–∏",
        "contact": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "search": "–ü–æ–∏—Å–∫",
        "choose_file": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª:",
        "back": "–ù–∞–∑–∞–¥",
        "contact_text": "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:",
        "file_titles": {
            "direct": "–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ploom Direct",
            "reboot": "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ PloomXAdvanced",
            "replacement": "–ó–∞–º–µ–Ω–∞ –≤ Phouse-IMS",
            "return": "–í–æ–∑–≤—Ä–∞—Ç –≤ Phouse-IMS",
            "unregisteredconsumer": "–ö–ª–∏–µ–Ω—Ç –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Phouse-IMS",
            "product": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ",
            "sales": "–°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂",
            "sticks": "–°—Ç–∏–∫–∏ Sobranie",
            "accessories": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
        },
        "video_choice": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫:"
    },
    "az": {
        "welcome": "Salam, m…ôn Ploom ≈üirk…ôtinin Botuyam v…ô Siz…ô t…ôlimd…ô k√∂m…ôklik g√∂st…ôr…ôc…ôy…ôm. Siz…ô nec…ô m√ºraci…ôt ed…ô bil…ôr…ôm?",
        "name_reply": "Tanƒ±≈ü olduƒüumuza ≈üadam, {name}!\nZ…ôhm…ôt olmasa b√∂lm…ô se√ßin:",
        "materials": "Materiallar",
        "videoguides": "Video d…ôrsl…ôr",
        "contact": "∆èlaq…ô",
        "search": "Axtarƒ±≈ü",
        "choose_file": "Z…ôhm…ôt olmasa faylƒ± se√ßin:",
        "back": "Geri",
        "contact_text": "A≈üaƒüƒ±dakƒ± ≈ü…ôxsl…ôrl…ô …ôlaq…ô saxlaya bil…ôrsiniz:",
        "file_titles": {
            "direct": "Ploom Direct √ºzr…ô Video t…ôlimat",
            "reboot": "PloomXAdvanced Sƒ±fƒ±rlanmasƒ±",
            "replacement": "D…ôyisdirilm…ô Phouse-IMS",
            "return": "Qaytarƒ±lma Phouse-IMS",
            "unregisteredconsumer": "Qeydiyyatsƒ±z m√º≈üt…ôri Phouse-IMS",
            "product": "M…ôhsul haqqƒ±nda m…ôlumat",
            "sales": "Satƒ±≈ü skriptl…ôri",
            "sticks": "Sobranie Stikl…ôri",
            "accessories": "Aksessuarlar"
        },
        "video_choice": "Video d…ôrs se√ßin:"
    },
    "en": {
        "welcome": "Hello, I am the Ploom company Bot, and I will help You with your training. How can I address You?",
        "name_reply": "Nice to meet you, {name}!\nPlease choose a section:",
        "materials": "Materials",
        "videoguides": "Video Lessons",
        "contact": "Contact",
        "search": "Search",
        "choose_file": "Please choose a file:",
        "back": "Back",
        "contact_text": "You can contact us via:",
        "file_titles": {
            "direct": "Video Instructions of Ploom Direct",
            "reboot": "How to reboot PloomXAdvanced",
            "replacement": "Replacement Phouse-IMS",
            "return": "Return&Refund Phouse-IMS",
            "unregisteredconsumer": "Unregistered consumer Phouse-IMS",
            "product": "Product Info",
            "sales": "Sales Scripts",
            "sticks": "Sobranie Sticks",
            "accessories": "Accessories"
        },
        "video_choice": "Choose a video lesson:"
    }
}

user_data = {}

search_keywords = {
    "direct": ["direct", "ploom direct", "–≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "video instruction"],
    "reboot": ["reboot", "reset", "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "—Å–±—Ä–æ—Å", "restart"],
    "replacement": ["replacement", "–∑–∞–º–µ–Ω–∞", "phouse-ims", "–∑–∞–º–µ–Ω–∞ phouse-ims"],
    "return": ["return", "refund", "–≤–æ–∑–≤—Ä–∞—Ç", "phouse-ims"],
    "unregisteredconsumer": ["unregistered", "consumer", "–∫–ª–∏–µ–Ω—Ç", "–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "phouse-ims"],
    "product": ["product", "–ø—Ä–æ–¥—É–∫—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info", "–ø—Ä–æ–¥—É–∫—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
    "sales": ["sales", "–ø—Ä–æ–¥–∞–∂–∏", "—Å–∫—Ä–∏–ø—Ç—ã", "scripts"],
    "sticks": ["sticks", "stiks", "sobranie", "—Å—Ç–∏–∫–∏"],
    "accessories": ["accessories", "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
}

@bot.message_handler(commands=['stats'])
def send_stats(message):
    count = len(users)
    bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
    
@bot.message_handler(commands=['menu'])
def show_menu(message):
    user_id = message.from_user.id
    if user_id in user_data:
        lang = user_data[user_id].get("lang", "ru")
        name = user_data[user_id].get("name", "User")
        send_main_menu(user_id, lang, name)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if str(user_id) not in users:
        users[str(user_id)] = ""  # –ò–º—è –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ, –∑–∞–ø–∏—à–µ–º –ø–æ–∑–∂–µ
        with open(users_file, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
    lang_markup = types.InlineKeyboardMarkup(row_width=3)
    lang_markup.add(
        types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        types.InlineKeyboardButton("üá¶üáø Az…ôrbaycan", callback_data="lang_az"),
        types.InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
    )
    intro_video_id = VIDEO_FILE_IDS.get("intro")
    if intro_video_id:
        try:
            bot.send_video(message.chat.id, intro_video_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

    sent = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / Dil se√ßin:", reply_markup=lang_markup)
    user_data[message.from_user.id] = {"lang_msg": sent.message_id, "state": "awaiting_language"}

@bot.message_handler(commands=['count'])
def count_users(message):
    bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

@bot.message_handler(func=lambda message: message.chat.type in ["group", "supergroup"])
def handle_group_messages(message):
    text_lower = message.text.lower() if message.text else ""
    if "–ø–æ–∏—Å–∫" in text_lower:
        bot.reply_to(message, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ /start –∏–ª–∏ /menu.")
    elif f"@{bot.get_me().username}" in text_lower:
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ /start –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def ask_name(call):
    user_id = call.from_user.id
    lang = call.data.split("_")[1]
    user_data[user_id] = {"lang": lang, "state": "awaiting_name"}
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    sent = bot.send_message(call.message.chat.id, texts[lang]["welcome"])
    user_data[user_id]["name_msg"] = sent.message_id
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ answer_callback_query: {e}")
@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id].get("state") == "awaiting_name")
def get_name(message):
    user_id = message.from_user.id
    name = message.text.strip()
    user_data[user_id]["name"] = name
    users[str(user_id)] = name
    with open(users_file, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

    lang = user_data[user_id]["lang"]

    logging.info(f"User {user_id} named '{name}' started using the bot.")

    try:
        bot.delete_message(message.chat.id, user_data[user_id].get("name_msg", 0))
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass

    user_data[user_id]["state"] = "main"
    send_main_menu(user_id, lang, name)

def send_main_menu(user_id, lang, name):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(texts[lang]["materials"], callback_data="materials"),
        types.InlineKeyboardButton(texts[lang]["videoguides"], callback_data="videoguides"),
        types.InlineKeyboardButton(texts[lang]["contact"], callback_data="contact"),
        types.InlineKeyboardButton(texts[lang]["search"], callback_data="search")
    )
    bot.send_message(user_id, texts[lang]["name_reply"].format(name=name), reply_markup=markup)
    user_data[user_id]["state"] = "main"

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        bot.answer_callback_query(call.id)
        return

    lang = user_data[user_id].get("lang", "ru")
    name = user_data[user_id].get("name", "User")
    state = user_data[user_id].get("state", "main")

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass

    if call.data == "materials":
        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, title in texts[lang]["file_titles"].items():
            if key not in VIDEO_FILE_IDS:  # –≠—Ç–æ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–∏–¥–µ–æ
                markup.add(types.InlineKeyboardButton(title, callback_data=f"file_{key}"))
        markup.add(types.InlineKeyboardButton(texts[lang]["back"], callback_data="main_menu"))
        bot.send_message(call.message.chat.id, texts[lang]["choose_file"], reply_markup=markup)
        user_data[user_id]["state"] = "materials"

    elif call.data == "videoguides":
        markup = types.InlineKeyboardMarkup()
        for key in ["direct", "reboot", "replacement", "return", "unregisteredconsumer"]:
            title = texts[lang]["file_titles"].get(key, key)
            markup.add(types.InlineKeyboardButton(title, callback_data=f"file_{key}"))
        markup.add(types.InlineKeyboardButton(texts[lang]["back"], callback_data="main_menu"))
        bot.send_message(call.message.chat.id, texts[lang]["video_choice"], reply_markup=markup)
        user_data[user_id]["state"] = "videoguides"

    elif call.data.startswith("file_"):
        file_key = call.data[5:]
        back_to = "materials" if file_key in file_paths else "videoguides"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(texts[lang]["back"], callback_data=back_to))

        file_id = VIDEO_FILE_IDS.get(file_key)
        if file_id:
            bot.send_video(call.message.chat.id, file_id, caption=texts[lang]["file_titles"].get(file_key, file_key), reply_markup=markup)
        else:
            path = file_paths.get(file_key)
            if path and path.startswith("http"):
                bot.send_message(call.message.chat.id, f"{texts[lang]['file_titles'].get(file_key, file_key)}:\n{path}", reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)

    elif call.data == "contact":
        markup = types.InlineKeyboardMarkup()
        if lang == "ru":
            markup.add(types.InlineKeyboardButton("–ú–µ—Ö—Ç–∏ (—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", url="https://t.me/mexti_s"))
            markup.add(types.InlineKeyboardButton("–•–∞–π—è–º –ú–∞—Ö–º—É–¥–æ–≤ (—Ç—Ä–µ–Ω–µ—Ä)", url="https://t.me/mxm086"))
        elif lang == "az":
            markup.add(types.InlineKeyboardButton("Mehdi Suleymanov (texniki d…ôst…ôk)", url="https://t.me/mexti_s"))
            markup.add(types.InlineKeyboardButton("X…ôyyam Mahmudov (t…ôlim√ßi)", url="https://t.me/mxm086"))
        elif lang == "en":
            markup.add(types.InlineKeyboardButton("Mehti (tech Support)", url="https://t.me/mexti_s"))
            markup.add(types.InlineKeyboardButton("Khayyam Mahmudov (trainer)", url="https://t.me/mxm086"))
        markup.add(types.InlineKeyboardButton(texts[lang]["back"], callback_data="main_menu"))
        bot.send_message(call.message.chat.id, texts[lang]["contact_text"], reply_markup=markup)
        user_data[user_id]["state"] = "contact"

    elif call.data == "search":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, texts[lang]["search"] + ": –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        user_data[user_id]["state"] = "search"

    elif call.data == "main_menu":
        send_main_menu(user_id, lang, name)

    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id].get("state") == "search")
def handle_search(message):
    user_id = message.from_user.id
    lang = user_data[user_id].get("lang", "ru")
    query = message.text.lower()

    results = []

    for key, keywords in search_keywords.items():
        if any(word in query for word in keywords):
            title = texts[lang]["file_titles"].get(key, key)
            results.append((key, title))

    if results:
        markup = types.InlineKeyboardMarkup()
        for key, title in results:
            markup.add(types.InlineKeyboardButton(title, callback_data=f"file_{key}"))
        markup.add(types.InlineKeyboardButton(texts[lang]["back"], callback_data="main_menu"))
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´{message.text}¬ª", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{message.text}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")

    user_data[user_id]["state"] = "search"

@bot.message_handler(content_types=['new_chat_members'])
def greet_new_member(message):
    for new_member in message.new_chat_members:
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {new_member.first_name}!\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç –æ—Ç Ploom üíº\n\n"
            "üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /–æ–±—É—á–µ–Ω–∏–µ"
        )
        bot.send_message(message.chat.id, welcome_text)

        try:
            bot.send_message(new_member.id, "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –æ–±—É—á–∞—é—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ Ploom!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        except Exception:
            bot.send_message(message.chat.id, f"üëã {new_member.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

@bot.message_handler(commands=['–æ–±—É—á–µ–Ω–∏–µ'])
def admin_only_command(message):
    try:
        chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        bot.reply_to(message, "üìö –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...")
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–æ–±—É—á–µ–Ω–∏–µ: {e}")

@bot.message_handler(content_types=['video', 'animation', 'document'])
def handle_media_messages(message):
    if message.video:
        file_id = message.video.file_id
        bot.send_message(message.chat.id, f"üìπ –≠—Ç–æ video\n`{file_id}`", parse_mode='Markdown')
    elif message.animation:
        file_id = message.animation.file_id
        bot.send_message(message.chat.id, f"üåÄ –≠—Ç–æ animation (GIF)\n`{file_id}`", parse_mode='Markdown')
    elif message.document:
        file = message.document
        if file.mime_type == "video/mp4":
            bot.send_message(message.chat.id, f"üìÅ –≠—Ç–æ .mp4 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n`{file.file_id}`", parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, f"üìÅ –î–æ–∫—É–º–µ–Ω—Ç: {file.file_name} (—Ç–∏–ø: {file.mime_type})")
    else:
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ, GIF –∏–ª–∏ mp4-–¥–æ–∫—É–º–µ–Ω—Ç.")

if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            time.sleep(10)





